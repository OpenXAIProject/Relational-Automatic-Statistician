(lp0
(iflexiblekernel
ScoredKernel
p1
(dp2
S'bic_nle'
p3
F12720.630212
sS'k_opt'
p4
(iflexiblekernel
ProductKernel
p5
(dp6
S'operands'
p7
(lp8
(iflexiblekernel
MaskKernel
p9
(dp10
S'ndim'
p11
I8
sS'active_dimension'
p12
I0
sS'base_kernel'
p13
(iflexiblekernel
CubicKernel
p14
(dp15
S'output_variance'
p16
F7.084045
sS'offset'
p17
F1.757755
sbsba(iflexiblekernel
MaskKernel
p18
(dp19
g11
I8
sg12
I7
sg13
(iflexiblekernel
SqExpPeriodicKernel
p20
(dp21
S'lengthscale'
p22
F-2.70108
sg16
F-0.071214
sS'period'
p23
F-0.380918
sbsbasbsS'nll'
p24
F6348.096611
sS'noise'
p25
(lp26
F-1.77276072
asS'laplace_nle'
p27
F-184450132.068237
sba(lp28
S"\na='Load the data, it should contain X and y.'\nload 'tmpstav33.mat'\n\n%% Load GPML\naddpath(genpath('/users/jrl44/GPML'));\n\n%% Set up model.\nmeanfunc = {@meanConst}\nhyp.mean = mean(y)\n\ncovfunc = {@covProd, {{@covMask, {[1 0 0 0 0 0 0 0], {@covPoly, 3}}}, {@covMask, {[0 0 0 0 0 0 0 1], @covPeriodic}}}}\nhyp.cov = [ 1.757755 7.084045 -2.70108 -0.380918 -0.071214 ]\n\nlikfunc = @likGauss\nhyp.lik = [-1.77276072]\n\n[hyp_opt, nlls] = minimize(hyp, @gp, -300, @infExact, meanfunc, covfunc, likfunc, X, y);\nbest_nll = nlls(end)\n\n%% Compute Hessian numerically for laplace approx\nnum_hypers = length(hyp.cov);\nhessian = NaN(num_hypers, num_hypers);\ndelta = 1e-6;\na='Get original gradients';\n[nll_orig, dnll_orig] = gp(hyp_opt, @infExact, meanfunc, covfunc, likfunc, X, y);\nfor d = 1:num_hypers\n    dhyp_opt = hyp_opt;\n    dhyp_opt.cov(d) = dhyp_opt.cov(d) + delta;\n    [nll_delta, dnll_delta] = gp(dhyp_opt, @infExact, meanfunc, covfunc, likfunc, X, y);\n    hessian(d, :) = (dnll_delta.cov - dnll_orig.cov) ./ delta;\nend\nhessian = 0.5 * (hessian + hessian');\n\nsave( '%(output_file)s', 'hyp_opt', 'best_nll', 'nlls', 'hessian' );\n%% exit();\n"
p29
aa(igpml
OptimizerOutput
p30
(dp31
S'noise_hyp'
p32
cnumpy.core.multiarray
_reconstruct
p33
(cnumpy
ndarray
p34
(I0
tp35
S'b'
p36
tp37
Rp38
(I1
(I1
tp39
cnumpy
dtype
p40
(S'f8'
p41
I0
I1
tp42
Rp43
(I3
S'<'
p44
NNNI-1
I-1
I0
tp45
bI00
S'\xbc3\xdaW:]\xfc\xbf'
p46
tp47
bsS'hessian'
p48
g33
(g34
(I0
tp49
g36
tp50
Rp51
(I1
(I5
I5
tp52
g43
I01
S'\x9a\xbd\x87\xe4\x1fr\xc3@\xbb\x98L\x82\x1fL\x92@?\xe4\x9f\xda\xb0\xa5\x90@\x00!O\xff\x83\xfa\x98A\xc4V\x8f\xf1\xaa\xb5\xc2@\xbb\x98L\x82\x1fL\x92@<\x18^u\xf0o\x93@\xf20L\xd7\xd6P\x84@\x12\x97\xcd\x1d\x08s\x9d\xc1\xbc[\xfd\xbc\xab\xbe\xba\xc0?\xe4\x9f\xda\xb0\xa5\x90@\xf20L\xd7\xd6P\x84@\x00pG8m\n\x81@e\xc6f\xaa\xbd\x9d\x9f\xc1\xe4\x05\xeew\xe3\xa6{@\x00!O\xff\x83\xfa\x98A\x12\x97\xcd\x1d\x08s\x9d\xc1e\xc6f\xaa\xbd\x9d\x9f\xc1a\xd6N6\xc6!\x87B\x8c\xb8\xac\x03\xf9Yh\xc1\xc4V\x8f\xf1\xaa\xb5\xc2@\xbc[\xfd\xbc\xab\xbe\xba\xc0\xe4\x05\xeew\xe3\xa6{@\x8c\xb8\xac\x03\xf9Yh\xc1\xc4\x1e\xa9\xcb\xa9,\xcd\xc0'
p53
tp54
bsg24
cnumpy.core.multiarray
scalar
p55
(g40
(S'f8'
p56
I0
I1
tp57
Rp58
(I3
S'<'
p59
NNNI-1
I-1
I0
tp60
bS'\x1e\xaaM\xd3\x84w\xa1@'
p61
tp62
Rp63
sS'kernel_hypers'
p64
g33
(g34
(I0
tp65
g36
tp66
Rp67
(I1
(I5
tp68
g43
I00
S'\x17;\xf5\xb4\xc3\x1f\xfc?\xddIy\xe4\x0fV\x1c@\x8e\xff\xbe\xd4\xcf\x9b\x05\xc0\xab\x15\xb8y\xf6`\xd8\xbfzh\x16\xa9\x14;\xb2\xbf'
p69
tp70
bsS'nlls'
p71
g33
(g34
(I0
tp72
g36
tp73
Rp74
(I1
(I2
tp75
g43
I00
S'\xf5\x0e\xd8#\xbax\xa1@\x1e\xaaM\xd3\x84w\xa1@'
p76
tp77
bsba(iflexiblekernel
ScoredKernel
p78
(dp79
g3
g55
(g58
S'\xad\xd6\xe6\xb1\xf4\x8f\xb1@'
p80
tp81
Rp82
sg4
(iflexiblekernel
ProductKernel
p83
(dp84
g7
(lp85
(iflexiblekernel
MaskKernel
p86
(dp87
g11
I8
sg12
I0
sg13
(iflexiblekernel
CubicKernel
p88
(dp89
g16
g55
(g58
S'\xddIy\xe4\x0fV\x1c@'
p90
tp91
Rp92
sg17
g55
(g58
S'\x17;\xf5\xb4\xc3\x1f\xfc?'
p93
tp94
Rp95
sbsba(iflexiblekernel
MaskKernel
p96
(dp97
g11
I8
sg12
I7
sg13
(iflexiblekernel
SqExpPeriodicKernel
p98
(dp99
g22
g55
(g58
S'\x8e\xff\xbe\xd4\xcf\x9b\x05\xc0'
p100
tp101
Rp102
sg16
g55
(g58
S'zh\x16\xa9\x14;\xb2\xbf'
p103
tp104
Rp105
sg23
g55
(g58
S'\xab\x15\xb8y\xf6`\xd8\xbf'
p106
tp107
Rp108
sbsbasbsg24
g55
(g58
S'\x1e\xaaM\xd3\x84w\xa1@'
p109
tp110
Rp111
sg25
g33
(g34
(I0
tp112
g36
tp113
Rp114
(I1
(I1
tp115
g43
I00
S'\xbc3\xdaW:]\xfc\xbf'
p116
tp117
bsg27
g55
(g58
S'\x00\xf0\xa5\xe0\x01\x8c\x82\xc1'
p118
tp119
Rp120
sba.