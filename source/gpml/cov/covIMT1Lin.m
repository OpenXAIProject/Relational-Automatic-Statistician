function K = covIMT1Lin(hyp, x, z, i)

% Integrated MT3
%
% k(x,y) = xxx
%
% where the hyperparameters are:
%
% hyp = [ log(l)
%         location ]
%
% Copyright (c) by James Robert Lloyd, 2013-08-05.

%%%% Warning - assumes 1d x and z

if nargin<2, K = '5'; return; end                  % report number of parameters
if nargin<3, z = []; end                                   % make sure, z exists
xeqz = numel(z)==0; dg = strcmp(z,'diag') && numel(z)>0;        % determine mode

n = size(x,1);
l = exp(hyp(1));
location = hyp(2);
sf2 = exp(2*hyp(3));
offset_scale = exp(2*hyp(4));
lin_scale = exp(2*hyp(5));

if dg
    a = x - location;
    b = x - location;
else
    if xeqz 
        a = repmat(x - location, 1, n);
        b = a';
    else
        a = repmat(x - location, 1, length(z));
        b = repmat((z - location)', length(x), 1);
    end
end

if nargin<4                                                        % covariances
%     K = ((a > 0) & (b >= a)) .* ...
%         l.*(2.*a+l.*(-1+exp(-b/l)+exp(-a/l)-exp((a-b)/l)))...
%         +...
%         ((b > 0) & (a > b)) .* ...
%         l.*(2.*b+l.*(-1+exp(-a/l)+exp(-b/l)-exp((b-a)/l)))...
%         +...
%         ((a < 0) & (b <= a)) .* ...
%         l.*(2.*-a+l.*(-1+exp(b/l)+exp(a/l)-exp((b-a)/l)))...
%         +...
%         ((b < 0) & (a < b)) .* ...
%         l.*(2.*-b+l.*(-1+exp(a/l)+exp(b/l)-exp((a-b)/l)))...
%         +...
%         ((a < 0) & (b > 0)) .* ...
%         l.*l.*(-1-exp((a-b)/l)+exp(a/l)+exp(-b/l))...
%         +...
%         ((b < 0) & (a > 0)) .* ...
%         l.*l.*(-1-exp((b-a)/l)+exp(b/l)+exp(-a/l));
    eab = exp((a-b)/l);
    eba = 1 ./ eab;
    ea  = exp(a/l);
    eb  = exp(b/l);
    ema = 1 ./ ea;
    emb = 1 ./ eb;
    K = ((a > 0) & (b >= a)) .* ...
        l.*(2.*a+l.*(-1+emb+ema-eab))...
        +...
        ((b > 0) & (a > b)) .* ...
        l.*(2.*b+l.*(-1+ema+emb-eba))...
        +...
        ((a < 0) & (b <= a)) .* ...
        l.*(2.*-a+l.*(-1+eb+ea-eba))...
        +...
        ((b < 0) & (a < b)) .* ...
        l.*(2.*-b+l.*(-1+ea+eb-eab))...
        +...
        ((a < 0) & (b > 0)) .* ...
        l.*l.*(-1-eab+ea+emb)...
        +...
        ((b < 0) & (a > 0)) .* ...
        l.*l.*(-1-eba+eb+ema);
    K = K * sf2;
    G = a .* b * lin_scale;
    H = offset_scale * ones(size(K));
else                                                               % derivatives
  if i == 1
%     K = ((a > 0) & (b >= a)) .* ...
%         l.*(2.*a-2.*l+exp((a-b)/l).*(a-b-2.*l)+exp(-a/l).*(a+2.*l)+exp(-b/l).*(b+2.*l))...
%         +...
%         ((b > 0) & (a > b)) .* ...
%         l.*(2.*b-2.*l+exp((b-a)/l).*(b-a-2.*l)+exp(-b/l).*(b+2.*l)+exp(-a/l).*(a+2.*l))...
%         +...
%         ((a < 0) & (b <= a)) .* ...
%         l.*(2.*-a-2.*l+exp((-a+b)/l).*(-a+b-2.*l)+exp(a/l).*(-a+2.*l)+exp(b/l).*(-b+2.*l))...
%         +...
%         ((b < 0) & (a < b)) .* ...
%         l.*(2.*-b-2.*l+exp((-b+a)/l).*(-b+a-2.*l)+exp(b/l).*(-b+2.*l)+exp(a/l).*(-a+2.*l))...
%         +...
%         ((a < 0) & (b > 0)) .* ...
%         l.*((2.*l+b).*exp(-b/l)+(a-b-2.*l).*exp((a-b)/l)-2.*l+(2.*l-a).*exp(a/l))...
%         +...
%         ((b < 0) & (a > 0)) .* ...
%         l.*((2.*l+a).*exp(-a/l)+(b-a-2.*l).*exp((b-a)/l)-2.*l+(2.*l-b).*exp(b/l));
    eab = exp((a-b)/l);
    eba = 1 ./ eab;
    ea  = exp(a/l);
    eb  = exp(b/l);
    ema = 1 ./ ea;
    emb = 1 ./ eb;
    K = ((a > 0) & (b >= a)) .* ...
        l.*(2.*a-2.*l+eab.*(a-b-2.*l)+ema.*(a+2.*l)+emb.*(b+2.*l))...
        +...
        ((b > 0) & (a > b)) .* ...
        l.*(2.*b-2.*l+eba.*(b-a-2.*l)+emb.*(b+2.*l)+ema.*(a+2.*l))...
        +...
        ((a < 0) & (b <= a)) .* ...
        l.*(2.*-a-2.*l+eba.*(-a+b-2.*l)+ea.*(-a+2.*l)+eb.*(-b+2.*l))...
        +...
        ((b < 0) & (a < b)) .* ...
        l.*(2.*-b-2.*l+eab.*(-b+a-2.*l)+eb.*(-b+2.*l)+ea.*(-a+2.*l))...
        +...
        ((a < 0) & (b > 0)) .* ...
        l.*((2.*l+b).*emb+(a-b-2.*l).*eab-2.*l+(2.*l-a).*ea)...
        +...
        ((b < 0) & (a > 0)) .* ...
        l.*((2.*l+a).*ema+(b-a-2.*l).*eba-2.*l+(2.*l-b).*eb);
    K = K * sf2;
    G = zeros(size(K));
    H = zeros(size(K));
  elseif i == 2
%     K = ((a > 0) & (b >= a)) .* ...
%         l.*(-2+exp(-a/l)+exp(-b/l))...
%         +...
%         ((b > 0) & (a > b)) .* ...
%         l.*(-2+exp(-a/l)+exp(-b/l))...
%         +...
%         ((a < 0) & (b <= a)) .* ...
%         -l.*(-2+exp(a/l)+exp(b/l))...
%         +...
%         ((b < 0) & (a < b)) .* ...
%         -l.*(-2+exp(a/l)+exp(b/l))...
%         +...
%         ((a < 0) & (b > 0)) .* ...
%         l.*(exp(-b/l)-exp(a/l))...
%         +...
%         ((b < 0) & (a > 0)) .* ...
%         l.*(exp(-a/l)-exp(b/l));
    ea  = exp(a/l);
    eb  = exp(b/l);
    ema = 1 ./ ea;
    emb = 1 ./ eb;
    K = ((a > 0) & (b >= a)) .* ...
        l.*(-2+ema+emb)...
        +...
        ((b > 0) & (a > b)) .* ...
        l.*(-2+ema+emb)...
        +...
        ((a < 0) & (b <= a)) .* ...
        -l.*(-2+ea+eb)...
        +...
        ((b < 0) & (a < b)) .* ...
        -l.*(-2+ea+eb)...
        +...
        ((a < 0) & (b > 0)) .* ...
        l.*(emb-ea)...
        +...
        ((b < 0) & (a > 0)) .* ...
        l.*(ema-eb);
    K = K * sf2;
    G = -(a + b) * lin_scale;
    H = zeros(size(K));
  elseif i == 3
%     K = ((a > 0) & (b >= a)) .* ...
%         l.*(2.*a+l.*(-1+exp(-b/l)+exp(-a/l)-exp((a-b)/l)))...
%         +...
%         ((b > 0) & (a > b)) .* ...
%         l.*(2.*b+l.*(-1+exp(-a/l)+exp(-b/l)-exp((b-a)/l)))...
%         +...
%         ((a < 0) & (b <= a)) .* ...
%         l.*(2.*-a+l.*(-1+exp(b/l)+exp(a/l)-exp((b-a)/l)))...
%         +...
%         ((b < 0) & (a < b)) .* ...
%         l.*(2.*-b+l.*(-1+exp(a/l)+exp(b/l)-exp((a-b)/l)))...
%         +...
%         ((a < 0) & (b > 0)) .* ...
%         l.*l.*(-1-exp((a-b)/l)+exp(a/l)+exp(-b/l))...
%         +...
%         ((b < 0) & (a > 0)) .* ...
%         l.*l.*(-1-exp((b-a)/l)+exp(b/l)+exp(-a/l));
    eab = exp((a-b)/l);
    eba = 1 ./ eab;
    ea  = exp(a/l);
    eb  = exp(b/l);
    ema = 1 ./ ea;
    emb = 1 ./ eb;
    K = ((a > 0) & (b >= a)) .* ...
        l.*(2.*a+l.*(-1+emb+ema-eab))...
        +...
        ((b > 0) & (a > b)) .* ...
        l.*(2.*b+l.*(-1+ema+emb-eba))...
        +...
        ((a < 0) & (b <= a)) .* ...
        l.*(2.*-a+l.*(-1+eb+ea-eba))...
        +...
        ((b < 0) & (a < b)) .* ...
        l.*(2.*-b+l.*(-1+ea+eb-eab))...
        +...
        ((a < 0) & (b > 0)) .* ...
        l.*l.*(-1-eab+ea+emb)...
        +...
        ((b < 0) & (a > 0)) .* ...
        l.*l.*(-1-eba+eb+ema);
    K = K * sf2 * 2;
    G = zeros(size(K));
    H = zeros(size(K));
  elseif i == 4
    H = 2 * offset_scale * ones(size(a));
    K = zeros(size(H));
    G = zeros(size(H));
  elseif i == 5
    G = 2 * a .* b * lin_scale;
    K = zeros(size(G));
    H = zeros(size(K));
  else
    error('Unknown hyperparameter')
  end
end
K = K + G + H;
end